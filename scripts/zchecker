#!/usr/bin/env python3
import os
import re
import argparse
import json
from zchecker import ZChecker

def get_list(filename):
    with open(filename) as f:
        objects = [s.strip() for s in f.readlines()]
    return objects

def get_config(filename):
    with open(filename) as f:
        config = json.load(f)
        
    auth = {
        'user': config.pop('user'),
        'password': config.pop('password')
    }
    return config, auth

def search(args):
    objects = get_list(args.file)
    config, auth = get_config(args.config)
    with ZChecker(args.db, auth) as z:
        if args.date is None:
            dates = z.available_nights()
        else:
            assert re.match('20[12][0-9]-[01][0-9]-[0-3][0-9]', args.date)
            dates = [args.date]

        for date in dates:
            z.find(comets, date)

def get_cutouts(args):
    config, auth = get_config(args.config)
    path = config['cutout path'] if args.path is None else args.path
    with ZChecker(args.db, auth) as z:
        z.get_cutouts(path)

def eph_update(args):
    objects = get_list(args.file)
    assert re.match('20[12][0-9]-[01][0-9]-[0-3][0-9]', args.start)
    assert re.match('20[12][0-9]-[01][0-9]-[0-3][0-9]', args.end)

    with ZChecker(args.db, {}) as z:
        z.update_ephemeris(objects, args.start, args.end, update=True)

def ztf_update(args):
    config, auth = get_config(args.config)
    assert re.match('20[12][0-9]-[01][0-9]-[0-3][0-9]', args.date)

    with ZChecker(args.db, auth) as z:
        z.update_obs(args.date)


# create the top-level parser
parser = argparse.ArgumentParser(prog='zchecker', description='ZTF small-body search tool.', epilog='''
Configuration file format:

{
  "user": "IRSA account user name",
  "password": "IRSA account password",
  "cutout_target": "/path/to/cutout/target/directory"
}

''')

parser.add_argument('--db', default='zchecker.db', help='Use this database file.')
parser.add_argument('--config', default=os.path.expanduser('~/.config/zchecker.config'), help='Use this configuration file.')
subparsers = parser.add_subparsers(help='Sub-commands')

# SEARCH
parser_search = subparsers.add_parser('search', help='Search ZTF fields in local database.')
parser_search.add_argument('file', help='Object list file name, one designation per line.  Designations must be resolvable by JPL/HORIZONS.')
parser_search.add_argument('--date', help='Search this date.  Default is to search all observations in the local database.')
parser_search.set_defaults(func=search)

# EPH-UPDATE
parser_eph = subparsers.add_parser('eph-update', help='Update local ephemeris database.', aliases=['eph'])
parser_eph.add_argument('file', help='Object list file name, one designation per line.  Designations must be resolvable by JPL/HORIZONS.')
parser_eph.add_argument('--start', default='2017-11-01', help='Start date of ephemeris: YYYY-MM-DD.')
parser_eph.add_argument('--end', default='2018-03-01', help='End date of ephemeris: YYYY-MM-DD.')
parser_eph.set_defaults(func=eph_update)

# ZTF-UPDATE
parser_ztf = subparsers.add_parser('ztf-update', help='Update local ZTF database.', aliases=['ztf'])
parser_ztf.add_argument('date', help='Retrieve observations for this UT date.')
parser_ztf.set_defaults(func=ztf_update)

# GET-CUTOUTS
parser_cutout = subparsers.add_parser('get-cutouts', help='Download cutouts.')
parser_cutout.add_argument('--path', help='Local cutout path.  Files will be sorted into object subdirectories.  The default is taken from the config file.')
parser_cutout.set_defaults(func=get_cutouts)

args = parser.parse_args()
args.func(args)
#parser.print_help()
