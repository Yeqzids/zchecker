#!/usr/bin/env python3
import os
import re
import argparse
from astropy.time import Time
from zchecker import ZChecker

def object_list(olist):
    import os
    if os.path.exists(olist):
        with open(olist) as f:
            objects = [s.strip() for s in f.readlines()]
    else:
        objects = [s.strip() for s in olist.split(',')]
    return objects

def get_updated_config(args):
    from zchecker import Config
    
    updates = {}
    # db and log are always defined
    if args.db is not None:
        updates['database'] = args.db
        
    if args.log is not None:
        updates['log'] = args.log

    # path is defined in a subcommand and may not be present
    path = getattr(args, 'path', None)
    if path is not None:
        updates['cutout path'] = path

    return Config(args.config, **updates)

def test_date(date, msg):
    if date is not None:
        assert re.match('20[12][0-9]-[01][0-9]-[0-3][0-9]', date), '{}  Date format is YYYY-MM-DD'.format(msg).strip()

# create the top-level parser
# Configuration file format should match the description in zchecker.config.
parser = argparse.ArgumentParser(prog='zchecker', description='ZTF small-body search tool.', epilog='''
Configuration file format:

{
  "database": "/path/to/zchecker.db",
  "log": "/path/to/zchecker.log",
  "user": "IRSA account user name",
  "password": "IRSA account password",
  "cutout path": "/path/to/cutout/target/directory"
}

''', formatter_class=argparse.RawTextHelpFormatter)

parser.add_argument('--db', help='database file')
parser.add_argument('--log', help='log file')
parser.add_argument('--config', default=os.path.expanduser('~/.config/zchecker.config'), help='configuration file')
parser.add_argument('-v', action='store_true', help='increase verbosity')
subparsers = parser.add_subparsers(help='sub-commands')

today = Time.now().iso[:10]

# SEARCH ############################################################
def search(args):
    config = get_updated_config(args)

    with ZChecker(config) as z:
        if args.full:
            dates = sorted(z.available_nights())
            start = dates[0]
            end = dates[-1]
        elif args.start is not None:
            assert args.end is not None
            start = args.start
            end = args.end
        elif args.end is not None:
            # should not get here unless there is an error
            assert args.start is not None
        else:
            start = args.date
            end = args.date

        test_date(start, 'Bad start date.')
        test_date(end, 'Bad start date.')

        z.fov_search(start, end, objects=args.objects)

parser_search = subparsers.add_parser('search', help='search ZTF fields in local database', epilog='Date format: YYYY-MM-DD.  Object designations must be in the local database.')
parser_search.add_argument('objects', type=object_list, nargs='?', help='file name listing one object per line, or a comma-separated list of objects; default is to search all targets in the ephemeris database defined over the requested date range')
parser_search.add_argument('--full', action='store_true', help='search all available nights')
parser_search.add_argument('--date', default=today, help='search a single date, UT')
parser_search.add_argument('--start', help='search a range of dates, beginning with this date, UT')
parser_search.add_argument('--end', help='search a range of dates, ending with this date, UT')
parser_search.set_defaults(func=search)

# EPH-UPDATE ############################################################
def eph_update(args):
    test_date(args.start, 'Bad start date.')
    test_date(args.end, 'Bad start date.')

    config = get_updated_config(args)
    with ZChecker(config) as z:
        z.update_ephemeris(args.objects, args.start, args.end,
                           update=args.update)

parser_eph = subparsers.add_parser('eph-update', help='update local ephemeris database', aliases=['eph'], epilog='Date format: YYYY-MM-DD.')
parser_eph.add_argument('objects', type=object_list, help='file name listing one object per line, or a comma-separated list of objects, must be resolvable by JPL/HORIZONS')
parser_eph.add_argument('--start', default='2017-10-13', help='start date of ephemeris, UT')
parser_eph.add_argument('--end', default='2018-03-01', help='end date of ephemeris, UT')
parser_eph.add_argument('--add', dest='update', action='store_false', help='Only add missing ephemerides.')
parser_eph.set_defaults(func=eph_update)

# CLEAN-EPH ############################################################
def clean_eph(args):
    test_date(args.start, 'Bad start date.')
    test_date(args.end, 'Bad start date.')

    config = get_updated_config(args)
    with ZChecker(config) as z:
        z.clean_ephemeris(args.objects, start=args.start, end=args.end)

parser_eph = subparsers.add_parser('clean-eph', help='clean local ephemeris database', epilog='Date format: YYYY-MM-DD.  Date interval is inclusive.  Default is to remove the entire ephemeris.')
parser_eph.add_argument('objects', type=object_list, help='file name listing one object per line, or a comma-separated list of objects, must be resolvable by JPL/HORIZONS')
parser_eph.add_argument('--start', help='start date of ephemeris to remove, UT')
parser_eph.add_argument('--end', help='end date of ephemeris to remove, UT')
parser_eph.set_defaults(func=clean_eph)

# CLEAN-FOUND ############################################################
def clean_found(args):
    test_date(args.start, 'Bad start date.')
    test_date(args.end, 'Bad start date.')

    config = get_updated_config(args)
    with ZChecker(config) as z:
        z.clean_found(args.objects, start=args.start, end=args.end)

parser_eph = subparsers.add_parser('clean-found', help='clean found object database', epilog='Date format: YYYY-MM-DD.  Date interval is inclusive.  Default is to remove all findings.')
parser_eph.add_argument('objects', type=object_list, help='file name listing one object per line, or a comma-separated list of objects, must be resolvable by JPL/HORIZONS')
parser_eph.add_argument('--start', help='start date to remove, UT')
parser_eph.add_argument('--end', help='end date to remove, UT')
parser_eph.set_defaults(func=clean_found)

# ZTF-UPDATE ############################################################
def ztf_update(args):
    test_date(args.date, 'Bad date.')

    config = get_updated_config(args)
    with ZChecker(config) as z:
        z.update_obs(args.date)

parser_ztf = subparsers.add_parser('ztf-update', help='update local ZTF database', aliases=['ztf'])
parser_ztf.add_argument('--date', default=today, help='retrieve observations for this date, UT; default is today')
parser_ztf.set_defaults(func=ztf_update)

# GET-CUTOUTS ############################################################
def download_cutouts(args):
    config = get_updated_config(args)
    with ZChecker(config) as z:
        z.download_cutouts(clean_failed=args.clean_failed)

parser_cutout = subparsers.add_parser('download-cutouts', help='Download cutouts.', aliases=['cutouts'])
parser_cutout.add_argument('--path', help='local cutout path')
parser_cutout.add_argument('--clean-failed', action='store_true', help='Delete file after a failed download.')
parser_cutout.set_defaults(func=download_cutouts)

# LIST-NIGHTS ############################################################
def list_nights(args):
    config = get_updated_config(args)
    with ZChecker(config, log=False) as z:
        print('\n'.join(z.available_nights()))

parser_nights = subparsers.add_parser('list-nights', help='list all ZTF nights saved to local database', aliases=['nights'])
parser_nights.set_defaults(func=list_nights)

# LIST-OBJECTS ############################################################
def list_objects(args):
    config = get_updated_config(args)
    with ZChecker(config, log=False) as z:
        rows = z.available_objects()

    n = max((max([len(row[0]) for row in rows]), 4))
    if args.dates:
        print('{:{}}  {:10}  {:10}  {}'.format('desg', n, 'first', 'last', 'n'))
        for row in rows:
            print('{:{}}  {}  {}  {}'.format(
                row[0], n, Time(row[1], format='jd').iso[:10],
                Time(row[2], format='jd').iso[:10], row[3]))
    else:
        for row in rows:
            print('{:{}}'.format(row[0], n))

parser_objects = subparsers.add_parser('list-objects', help='list all objects in the local database with their ephemeris ranges', aliases=['objects'])
parser_objects.add_argument('--no-dates', dest='dates', action='store_false', help='do not list ephemeris date range')
parser_objects.set_defaults(func=list_objects)

args = parser.parse_args()
try:
    getattr(args, 'func')
except AttributeError as e:
    parser.print_help()
    if args.v:
        raise(e)

try:
    args.func(args)
except Exception as e:
    if args.v:
        raise e
    else:
        print(e)

